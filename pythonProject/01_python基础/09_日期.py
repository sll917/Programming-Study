#!/usr/bin/python3
# -*- coding:utf-8 -*-
#######################################################
# Author: liangliangSu
# Created Time: 2024-08-03 23:29
# Email: sll917@outlook.com
# Version: V1.0
# File Name: demo9_日期.py
#######################################################
print('(1)------------------完美分割线---------------------')
#Python 日期
#Python 中的日期不是其自身的数据类型，但是我们可以导入名为 datetime 的模块，把日期视作日期对象进行处理。
#
#实例
#导入 datetime 模块并显示当前日期：

import datetime

x = datetime.datetime.now()
print(x)

# 1-日期输出
#如果我们执行上面的代码，结果将是：
#2019-08-14 12:52:55.817273
#日期包含年、月、日、小时、分钟、秒和微秒。

#datetime 模块有许多方法可以返回有关日期对象的信息。
#以下是一些例子，您将在本章稍后详细学习它们：
#实例
#返回 weekday 的名称和年份：

print('(2)------------------完美分割线---------------------')
import datetime

x = datetime.datetime.now()

print(x.year)
print(x.strftime("%A"))

# 2-创建日期对象
#如需创建日期，我们可以使用 datetime 模块的 datetime() 类（构造函数）。

#datetime() 类需要三个参数来创建日期：年、月、日。
#实例
#创建日期对象：

print('(3)------------------完美分割线---------------------')
import datetime

x = datetime.datetime(2020, 5, 17)

print(x)

#datetime() 类还接受时间和时区（小时、分钟、秒、微秒、tzone）的参数，不过它们是可选的，默认值为 0，（时区默认为 None）。

# 3-strftime() 方法
#datetime 对象拥有把日期对象格式化为可读字符串的方法。
#该方法称为 strftime()，并使用一个 format 参数来指定返回字符串的格式：

#实例
#显示月份的名称：

print('(4)------------------完美分割线---------------------')
import datetime

x = datetime.datetime(2024, 8, 3)

print(x.strftime("%B"))

"""
所有合法格式代码的参考：
指令	描述	实例	TIY
%a	Weekday，短版本	Wed	试一试
%A	Weekday，完整版本	Wednesday	试一试
%w	Weekday，数字 0-6，0 为周日	3	试一试
%d	日，数字 01-31	31	试一试
%b	月名称，短版本	Dec	试一试
%B	月名称，完整版本	December	试一试
%m	月，数字01-12	12	试一试
%y	年，短版本，无世纪	18	试一试
%Y	年，完整版本	2018	试一试
%H	小时，00-23	17	试一试
%I	小时，00-12	05	试一试
%p	AM/PM	PM	试一试
%M	分，00-59	41	试一试
%S	秒，00-59	08	试一试
%f	微妙，000000-999999	548513	试一试
%z	UTC 偏移	+0100	试一试
%Z	时区	CST	试一试
%j	天数，001-366	365	试一试
%U	周数，每周的第一天是周日，00-53	52	试一试
%W	周数，每周的第一天是周一，00-53	52	试一试
%c	日期和时间的本地版本	Mon Dec 31 17:41:00 2018	试一试
%x	日期的本地版本	12/31/18	试一试
%X	时间的本地版本	17:41:00	试一试
%%	A % character	%	试一试
"""
